/*
 *
 *    Copyright (c) 2022 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

package chip.devicecontroller;

import chip.clusterinfo.CommandParameterInfo;
import chip.clusterinfo.InteractionInfo;
import chip.devicecontroller.ChipClusters.DefaultClusterCallback;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;

public class ClusterWriteMapping {
  public Map<String, Map<String, InteractionInfo>> getWriteAttributeMap() {
    Map<String, Map<String, InteractionInfo>> writeAttributeMap = new HashMap<>();
    Map<String, InteractionInfo> writeIdentifyInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeIdentifyIdentifyTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo identifyidentifyTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeIdentifyIdentifyTimeCommandParams.put("value", identifyidentifyTimeCommandParameterInfo);
    InteractionInfo writeIdentifyIdentifyTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.IdentifyCluster) cluster)
                  .writeIdentifyTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeIdentifyIdentifyTimeCommandParams);
    writeIdentifyInteractionInfo.put(
        "writeIdentifyTimeAttribute", writeIdentifyIdentifyTimeAttributeInteractionInfo);
    writeAttributeMap.put("identify", writeIdentifyInteractionInfo);
    Map<String, InteractionInfo> writeGroupsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("groups", writeGroupsInteractionInfo);
    Map<String, InteractionInfo> writeScenesInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("scenes", writeScenesInteractionInfo);
    Map<String, InteractionInfo> writeOnOffInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeOnOffOnTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffonTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffOnTimeCommandParams.put("value", onOffonTimeCommandParameterInfo);
    InteractionInfo writeOnOffOnTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .writeOnTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffOnTimeCommandParams);
    writeOnOffInteractionInfo.put("writeOnTimeAttribute", writeOnOffOnTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeOnOffOffWaitTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffoffWaitTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffOffWaitTimeCommandParams.put("value", onOffoffWaitTimeCommandParameterInfo);
    InteractionInfo writeOnOffOffWaitTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .writeOffWaitTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffOffWaitTimeCommandParams);
    writeOnOffInteractionInfo.put(
        "writeOffWaitTimeAttribute", writeOnOffOffWaitTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeOnOffStartUpOnOffCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffstartUpOnOffCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffStartUpOnOffCommandParams.put("value", onOffstartUpOnOffCommandParameterInfo);
    InteractionInfo writeOnOffStartUpOnOffAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffCluster) cluster)
                  .writeStartUpOnOffAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffStartUpOnOffCommandParams);
    writeOnOffInteractionInfo.put(
        "writeStartUpOnOffAttribute", writeOnOffStartUpOnOffAttributeInteractionInfo);
    writeAttributeMap.put("onOff", writeOnOffInteractionInfo);
    Map<String, InteractionInfo> writeOnOffSwitchConfigurationInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeOnOffSwitchConfigurationSwitchActionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo onOffSwitchConfigurationswitchActionsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOnOffSwitchConfigurationSwitchActionsCommandParams.put(
        "value", onOffSwitchConfigurationswitchActionsCommandParameterInfo);
    InteractionInfo writeOnOffSwitchConfigurationSwitchActionsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OnOffSwitchConfigurationCluster) cluster)
                  .writeSwitchActionsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOnOffSwitchConfigurationSwitchActionsCommandParams);
    writeOnOffSwitchConfigurationInteractionInfo.put(
        "writeSwitchActionsAttribute",
        writeOnOffSwitchConfigurationSwitchActionsAttributeInteractionInfo);
    writeAttributeMap.put("onOffSwitchConfiguration", writeOnOffSwitchConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeLevelControlInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeLevelControlOptionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControloptionsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOptionsCommandParams.put("value", levelControloptionsCommandParameterInfo);
    InteractionInfo writeLevelControlOptionsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOptionsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOptionsCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOptionsAttribute", writeLevelControlOptionsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOnOffTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlonOffTransitionTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOnOffTransitionTimeCommandParams.put(
        "value", levelControlonOffTransitionTimeCommandParameterInfo);
    InteractionInfo writeLevelControlOnOffTransitionTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOnOffTransitionTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOnOffTransitionTimeCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOnOffTransitionTimeAttribute",
        writeLevelControlOnOffTransitionTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOnLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlonLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOnLevelCommandParams.put("value", levelControlonLevelCommandParameterInfo);
    InteractionInfo writeLevelControlOnLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOnLevelAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOnLevelCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOnLevelAttribute", writeLevelControlOnLevelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOnTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlonTransitionTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOnTransitionTimeCommandParams.put(
        "value", levelControlonTransitionTimeCommandParameterInfo);
    InteractionInfo writeLevelControlOnTransitionTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOnTransitionTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOnTransitionTimeCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOnTransitionTimeAttribute",
        writeLevelControlOnTransitionTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlOffTransitionTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControloffTransitionTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlOffTransitionTimeCommandParams.put(
        "value", levelControloffTransitionTimeCommandParameterInfo);
    InteractionInfo writeLevelControlOffTransitionTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeOffTransitionTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlOffTransitionTimeCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeOffTransitionTimeAttribute",
        writeLevelControlOffTransitionTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlDefaultMoveRateCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControldefaultMoveRateCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlDefaultMoveRateCommandParams.put(
        "value", levelControldefaultMoveRateCommandParameterInfo);
    InteractionInfo writeLevelControlDefaultMoveRateAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeDefaultMoveRateAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlDefaultMoveRateCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeDefaultMoveRateAttribute", writeLevelControlDefaultMoveRateAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeLevelControlStartUpCurrentLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo levelControlstartUpCurrentLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeLevelControlStartUpCurrentLevelCommandParams.put(
        "value", levelControlstartUpCurrentLevelCommandParameterInfo);
    InteractionInfo writeLevelControlStartUpCurrentLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LevelControlCluster) cluster)
                  .writeStartUpCurrentLevelAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLevelControlStartUpCurrentLevelCommandParams);
    writeLevelControlInteractionInfo.put(
        "writeStartUpCurrentLevelAttribute",
        writeLevelControlStartUpCurrentLevelAttributeInteractionInfo);
    writeAttributeMap.put("levelControl", writeLevelControlInteractionInfo);
    Map<String, InteractionInfo> writeBinaryInputBasicInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBinaryInputBasicActiveTextCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicactiveTextCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBinaryInputBasicActiveTextCommandParams.put(
        "value", binaryInputBasicactiveTextCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicActiveTextAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writeActiveTextAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicActiveTextCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writeActiveTextAttribute", writeBinaryInputBasicActiveTextAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBinaryInputBasicDescriptionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicdescriptionCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBinaryInputBasicDescriptionCommandParams.put(
        "value", binaryInputBasicdescriptionCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicDescriptionAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writeDescriptionAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicDescriptionCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writeDescriptionAttribute", writeBinaryInputBasicDescriptionAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBinaryInputBasicInactiveTextCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicinactiveTextCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBinaryInputBasicInactiveTextCommandParams.put(
        "value", binaryInputBasicinactiveTextCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicInactiveTextAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writeInactiveTextAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicInactiveTextCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writeInactiveTextAttribute", writeBinaryInputBasicInactiveTextAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBinaryInputBasicOutOfServiceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicoutOfServiceCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeBinaryInputBasicOutOfServiceCommandParams.put(
        "value", binaryInputBasicoutOfServiceCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicOutOfServiceAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writeOutOfServiceAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicOutOfServiceCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writeOutOfServiceAttribute", writeBinaryInputBasicOutOfServiceAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBinaryInputBasicPresentValueCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicpresentValueCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeBinaryInputBasicPresentValueCommandParams.put(
        "value", binaryInputBasicpresentValueCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicPresentValueAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writePresentValueAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicPresentValueCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writePresentValueAttribute", writeBinaryInputBasicPresentValueAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBinaryInputBasicReliabilityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo binaryInputBasicreliabilityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBinaryInputBasicReliabilityCommandParams.put(
        "value", binaryInputBasicreliabilityCommandParameterInfo);
    InteractionInfo writeBinaryInputBasicReliabilityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BinaryInputBasicCluster) cluster)
                  .writeReliabilityAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBinaryInputBasicReliabilityCommandParams);
    writeBinaryInputBasicInteractionInfo.put(
        "writeReliabilityAttribute", writeBinaryInputBasicReliabilityAttributeInteractionInfo);
    writeAttributeMap.put("binaryInputBasic", writeBinaryInputBasicInteractionInfo);
    Map<String, InteractionInfo> writeDescriptorInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("descriptor", writeDescriptorInteractionInfo);
    Map<String, InteractionInfo> writeBindingInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("binding", writeBindingInteractionInfo);
    Map<String, InteractionInfo> writeAccessControlInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("accessControl", writeAccessControlInteractionInfo);
    Map<String, InteractionInfo> writeActionsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("actions", writeActionsInteractionInfo);
    Map<String, InteractionInfo> writeBasicInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBasicNodeLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basicnodeLabelCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBasicNodeLabelCommandParams.put("value", basicnodeLabelCommandParameterInfo);
    InteractionInfo writeBasicNodeLabelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .writeNodeLabelAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicNodeLabelCommandParams);
    writeBasicInteractionInfo.put(
        "writeNodeLabelAttribute", writeBasicNodeLabelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBasicLocationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basiclocationCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBasicLocationCommandParams.put("value", basiclocationCommandParameterInfo);
    InteractionInfo writeBasicLocationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .writeLocationAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicLocationCommandParams);
    writeBasicInteractionInfo.put(
        "writeLocationAttribute", writeBasicLocationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBasicLocalConfigDisabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo basiclocalConfigDisabledCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeBasicLocalConfigDisabledCommandParams.put(
        "value", basiclocalConfigDisabledCommandParameterInfo);
    InteractionInfo writeBasicLocalConfigDisabledAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BasicCluster) cluster)
                  .writeLocalConfigDisabledAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBasicLocalConfigDisabledCommandParams);
    writeBasicInteractionInfo.put(
        "writeLocalConfigDisabledAttribute", writeBasicLocalConfigDisabledAttributeInteractionInfo);
    writeAttributeMap.put("basic", writeBasicInteractionInfo);
    Map<String, InteractionInfo> writeOtaSoftwareUpdateProviderInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "otaSoftwareUpdateProvider", writeOtaSoftwareUpdateProviderInteractionInfo);
    Map<String, InteractionInfo> writeOtaSoftwareUpdateRequestorInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "otaSoftwareUpdateRequestor", writeOtaSoftwareUpdateRequestorInteractionInfo);
    Map<String, InteractionInfo> writeLocalizationConfigurationInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeLocalizationConfigurationActiveLocaleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo localizationConfigurationactiveLocaleCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeLocalizationConfigurationActiveLocaleCommandParams.put(
        "value", localizationConfigurationactiveLocaleCommandParameterInfo);
    InteractionInfo writeLocalizationConfigurationActiveLocaleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.LocalizationConfigurationCluster) cluster)
                  .writeActiveLocaleAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeLocalizationConfigurationActiveLocaleCommandParams);
    writeLocalizationConfigurationInteractionInfo.put(
        "writeActiveLocaleAttribute",
        writeLocalizationConfigurationActiveLocaleAttributeInteractionInfo);
    writeAttributeMap.put(
        "localizationConfiguration", writeLocalizationConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeTimeFormatLocalizationInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeTimeFormatLocalizationHourFormatCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo timeFormatLocalizationhourFormatCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTimeFormatLocalizationHourFormatCommandParams.put(
        "value", timeFormatLocalizationhourFormatCommandParameterInfo);
    InteractionInfo writeTimeFormatLocalizationHourFormatAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TimeFormatLocalizationCluster) cluster)
                  .writeHourFormatAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTimeFormatLocalizationHourFormatCommandParams);
    writeTimeFormatLocalizationInteractionInfo.put(
        "writeHourFormatAttribute", writeTimeFormatLocalizationHourFormatAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTimeFormatLocalizationActiveCalendarTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo timeFormatLocalizationactiveCalendarTypeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTimeFormatLocalizationActiveCalendarTypeCommandParams.put(
        "value", timeFormatLocalizationactiveCalendarTypeCommandParameterInfo);
    InteractionInfo writeTimeFormatLocalizationActiveCalendarTypeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TimeFormatLocalizationCluster) cluster)
                  .writeActiveCalendarTypeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTimeFormatLocalizationActiveCalendarTypeCommandParams);
    writeTimeFormatLocalizationInteractionInfo.put(
        "writeActiveCalendarTypeAttribute",
        writeTimeFormatLocalizationActiveCalendarTypeAttributeInteractionInfo);
    writeAttributeMap.put("timeFormatLocalization", writeTimeFormatLocalizationInteractionInfo);
    Map<String, InteractionInfo> writeUnitLocalizationInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeUnitLocalizationTemperatureUnitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo unitLocalizationtemperatureUnitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeUnitLocalizationTemperatureUnitCommandParams.put(
        "value", unitLocalizationtemperatureUnitCommandParameterInfo);
    InteractionInfo writeUnitLocalizationTemperatureUnitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.UnitLocalizationCluster) cluster)
                  .writeTemperatureUnitAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeUnitLocalizationTemperatureUnitCommandParams);
    writeUnitLocalizationInteractionInfo.put(
        "writeTemperatureUnitAttribute",
        writeUnitLocalizationTemperatureUnitAttributeInteractionInfo);
    writeAttributeMap.put("unitLocalization", writeUnitLocalizationInteractionInfo);
    Map<String, InteractionInfo> writePowerSourceConfigurationInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put("powerSourceConfiguration", writePowerSourceConfigurationInteractionInfo);
    Map<String, InteractionInfo> writePowerSourceInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("powerSource", writePowerSourceInteractionInfo);
    Map<String, InteractionInfo> writeGeneralCommissioningInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeGeneralCommissioningBreadcrumbCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo generalCommissioningbreadcrumbCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeGeneralCommissioningBreadcrumbCommandParams.put(
        "value", generalCommissioningbreadcrumbCommandParameterInfo);
    InteractionInfo writeGeneralCommissioningBreadcrumbAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.GeneralCommissioningCluster) cluster)
                  .writeBreadcrumbAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeGeneralCommissioningBreadcrumbCommandParams);
    writeGeneralCommissioningInteractionInfo.put(
        "writeBreadcrumbAttribute", writeGeneralCommissioningBreadcrumbAttributeInteractionInfo);
    writeAttributeMap.put("generalCommissioning", writeGeneralCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeNetworkCommissioningInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeNetworkCommissioningInterfaceEnabledCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo networkCommissioninginterfaceEnabledCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeNetworkCommissioningInterfaceEnabledCommandParams.put(
        "value", networkCommissioninginterfaceEnabledCommandParameterInfo);
    InteractionInfo writeNetworkCommissioningInterfaceEnabledAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.NetworkCommissioningCluster) cluster)
                  .writeInterfaceEnabledAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeNetworkCommissioningInterfaceEnabledCommandParams);
    writeNetworkCommissioningInteractionInfo.put(
        "writeInterfaceEnabledAttribute",
        writeNetworkCommissioningInterfaceEnabledAttributeInteractionInfo);
    writeAttributeMap.put("networkCommissioning", writeNetworkCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeDiagnosticLogsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("diagnosticLogs", writeDiagnosticLogsInteractionInfo);
    Map<String, InteractionInfo> writeGeneralDiagnosticsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("generalDiagnostics", writeGeneralDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeSoftwareDiagnosticsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("softwareDiagnostics", writeSoftwareDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeThreadNetworkDiagnosticsInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put("threadNetworkDiagnostics", writeThreadNetworkDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeWiFiNetworkDiagnosticsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("wiFiNetworkDiagnostics", writeWiFiNetworkDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeEthernetNetworkDiagnosticsInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "ethernetNetworkDiagnostics", writeEthernetNetworkDiagnosticsInteractionInfo);
    Map<String, InteractionInfo> writeBridgedDeviceBasicInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBridgedDeviceBasicNodeLabelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo bridgedDeviceBasicnodeLabelCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBridgedDeviceBasicNodeLabelCommandParams.put(
        "value", bridgedDeviceBasicnodeLabelCommandParameterInfo);
    InteractionInfo writeBridgedDeviceBasicNodeLabelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BridgedDeviceBasicCluster) cluster)
                  .writeNodeLabelAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBridgedDeviceBasicNodeLabelCommandParams);
    writeBridgedDeviceBasicInteractionInfo.put(
        "writeNodeLabelAttribute", writeBridgedDeviceBasicNodeLabelAttributeInteractionInfo);
    writeAttributeMap.put("bridgedDeviceBasic", writeBridgedDeviceBasicInteractionInfo);
    Map<String, InteractionInfo> writeSwitchInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("switch", writeSwitchInteractionInfo);
    Map<String, InteractionInfo> writeAdministratorCommissioningInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "administratorCommissioning", writeAdministratorCommissioningInteractionInfo);
    Map<String, InteractionInfo> writeOperationalCredentialsInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("operationalCredentials", writeOperationalCredentialsInteractionInfo);
    Map<String, InteractionInfo> writeGroupKeyManagementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("groupKeyManagement", writeGroupKeyManagementInteractionInfo);
    Map<String, InteractionInfo> writeFixedLabelInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("fixedLabel", writeFixedLabelInteractionInfo);
    Map<String, InteractionInfo> writeUserLabelInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("userLabel", writeUserLabelInteractionInfo);
    Map<String, InteractionInfo> writeBooleanStateInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("booleanState", writeBooleanStateInteractionInfo);
    Map<String, InteractionInfo> writeModeSelectInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeModeSelectStartUpModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo modeSelectstartUpModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeModeSelectStartUpModeCommandParams.put("value", modeSelectstartUpModeCommandParameterInfo);
    InteractionInfo writeModeSelectStartUpModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .writeStartUpModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeModeSelectStartUpModeCommandParams);
    writeModeSelectInteractionInfo.put(
        "writeStartUpModeAttribute", writeModeSelectStartUpModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeModeSelectOnModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo modeSelectonModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeModeSelectOnModeCommandParams.put("value", modeSelectonModeCommandParameterInfo);
    InteractionInfo writeModeSelectOnModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ModeSelectCluster) cluster)
                  .writeOnModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeModeSelectOnModeCommandParams);
    writeModeSelectInteractionInfo.put(
        "writeOnModeAttribute", writeModeSelectOnModeAttributeInteractionInfo);
    writeAttributeMap.put("modeSelect", writeModeSelectInteractionInfo);
    Map<String, InteractionInfo> writeDoorLockInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeDoorLockDoorOpenEventsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockdoorOpenEventsCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeDoorLockDoorOpenEventsCommandParams.put(
        "value", doorLockdoorOpenEventsCommandParameterInfo);
    InteractionInfo writeDoorLockDoorOpenEventsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeDoorOpenEventsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockDoorOpenEventsCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeDoorOpenEventsAttribute", writeDoorLockDoorOpenEventsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockDoorClosedEventsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockdoorClosedEventsCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeDoorLockDoorClosedEventsCommandParams.put(
        "value", doorLockdoorClosedEventsCommandParameterInfo);
    InteractionInfo writeDoorLockDoorClosedEventsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeDoorClosedEventsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockDoorClosedEventsCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeDoorClosedEventsAttribute", writeDoorLockDoorClosedEventsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockOpenPeriodCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockopenPeriodCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockOpenPeriodCommandParams.put("value", doorLockopenPeriodCommandParameterInfo);
    InteractionInfo writeDoorLockOpenPeriodAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeOpenPeriodAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockOpenPeriodCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeOpenPeriodAttribute", writeDoorLockOpenPeriodAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockLanguageCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocklanguageCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeDoorLockLanguageCommandParams.put("value", doorLocklanguageCommandParameterInfo);
    InteractionInfo writeDoorLockLanguageAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeLanguageAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockLanguageCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeLanguageAttribute", writeDoorLockLanguageAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockLEDSettingsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockLEDSettingsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockLEDSettingsCommandParams.put("value", doorLockLEDSettingsCommandParameterInfo);
    InteractionInfo writeDoorLockLEDSettingsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeLEDSettingsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockLEDSettingsCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeLEDSettingsAttribute", writeDoorLockLEDSettingsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockAutoRelockTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockautoRelockTimeCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeDoorLockAutoRelockTimeCommandParams.put(
        "value", doorLockautoRelockTimeCommandParameterInfo);
    InteractionInfo writeDoorLockAutoRelockTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeAutoRelockTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockAutoRelockTimeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeAutoRelockTimeAttribute", writeDoorLockAutoRelockTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockSoundVolumeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksoundVolumeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockSoundVolumeCommandParams.put("value", doorLocksoundVolumeCommandParameterInfo);
    InteractionInfo writeDoorLockSoundVolumeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeSoundVolumeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockSoundVolumeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeSoundVolumeAttribute", writeDoorLockSoundVolumeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockOperatingModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockoperatingModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockOperatingModeCommandParams.put("value", doorLockoperatingModeCommandParameterInfo);
    InteractionInfo writeDoorLockOperatingModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeOperatingModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockOperatingModeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeOperatingModeAttribute", writeDoorLockOperatingModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockEnableLocalProgrammingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockenableLocalProgrammingCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockEnableLocalProgrammingCommandParams.put(
        "value", doorLockenableLocalProgrammingCommandParameterInfo);
    InteractionInfo writeDoorLockEnableLocalProgrammingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeEnableLocalProgrammingAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockEnableLocalProgrammingCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeEnableLocalProgrammingAttribute",
        writeDoorLockEnableLocalProgrammingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockEnableOneTouchLockingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockenableOneTouchLockingCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockEnableOneTouchLockingCommandParams.put(
        "value", doorLockenableOneTouchLockingCommandParameterInfo);
    InteractionInfo writeDoorLockEnableOneTouchLockingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeEnableOneTouchLockingAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockEnableOneTouchLockingCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeEnableOneTouchLockingAttribute",
        writeDoorLockEnableOneTouchLockingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockEnableInsideStatusLEDCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockenableInsideStatusLEDCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockEnableInsideStatusLEDCommandParams.put(
        "value", doorLockenableInsideStatusLEDCommandParameterInfo);
    InteractionInfo writeDoorLockEnableInsideStatusLEDAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeEnableInsideStatusLEDAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockEnableInsideStatusLEDCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeEnableInsideStatusLEDAttribute",
        writeDoorLockEnableInsideStatusLEDAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockEnablePrivacyModeButtonCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockenablePrivacyModeButtonCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockEnablePrivacyModeButtonCommandParams.put(
        "value", doorLockenablePrivacyModeButtonCommandParameterInfo);
    InteractionInfo writeDoorLockEnablePrivacyModeButtonAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeEnablePrivacyModeButtonAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockEnablePrivacyModeButtonCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeEnablePrivacyModeButtonAttribute",
        writeDoorLockEnablePrivacyModeButtonAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockLocalProgrammingFeaturesCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocklocalProgrammingFeaturesCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockLocalProgrammingFeaturesCommandParams.put(
        "value", doorLocklocalProgrammingFeaturesCommandParameterInfo);
    InteractionInfo writeDoorLockLocalProgrammingFeaturesAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeLocalProgrammingFeaturesAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockLocalProgrammingFeaturesCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeLocalProgrammingFeaturesAttribute",
        writeDoorLockLocalProgrammingFeaturesAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockWrongCodeEntryLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockwrongCodeEntryLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockWrongCodeEntryLimitCommandParams.put(
        "value", doorLockwrongCodeEntryLimitCommandParameterInfo);
    InteractionInfo writeDoorLockWrongCodeEntryLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeWrongCodeEntryLimitAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockWrongCodeEntryLimitCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeWrongCodeEntryLimitAttribute",
        writeDoorLockWrongCodeEntryLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockUserCodeTemporaryDisableTimeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockuserCodeTemporaryDisableTimeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockUserCodeTemporaryDisableTimeCommandParams.put(
        "value", doorLockuserCodeTemporaryDisableTimeCommandParameterInfo);
    InteractionInfo writeDoorLockUserCodeTemporaryDisableTimeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeUserCodeTemporaryDisableTimeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockUserCodeTemporaryDisableTimeCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeUserCodeTemporaryDisableTimeAttribute",
        writeDoorLockUserCodeTemporaryDisableTimeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockSendPINOverTheAirCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLocksendPINOverTheAirCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockSendPINOverTheAirCommandParams.put(
        "value", doorLocksendPINOverTheAirCommandParameterInfo);
    InteractionInfo writeDoorLockSendPINOverTheAirAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeSendPINOverTheAirAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockSendPINOverTheAirCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeSendPINOverTheAirAttribute", writeDoorLockSendPINOverTheAirAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockRequirePINforRemoteOperationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockrequirePINforRemoteOperationCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeDoorLockRequirePINforRemoteOperationCommandParams.put(
        "value", doorLockrequirePINforRemoteOperationCommandParameterInfo);
    InteractionInfo writeDoorLockRequirePINforRemoteOperationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeRequirePINforRemoteOperationAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockRequirePINforRemoteOperationCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeRequirePINforRemoteOperationAttribute",
        writeDoorLockRequirePINforRemoteOperationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeDoorLockExpiringUserTimeoutCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo doorLockexpiringUserTimeoutCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeDoorLockExpiringUserTimeoutCommandParams.put(
        "value", doorLockexpiringUserTimeoutCommandParameterInfo);
    InteractionInfo writeDoorLockExpiringUserTimeoutAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.DoorLockCluster) cluster)
                  .writeExpiringUserTimeoutAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeDoorLockExpiringUserTimeoutCommandParams);
    writeDoorLockInteractionInfo.put(
        "writeExpiringUserTimeoutAttribute",
        writeDoorLockExpiringUserTimeoutAttributeInteractionInfo);
    writeAttributeMap.put("doorLock", writeDoorLockInteractionInfo);
    Map<String, InteractionInfo> writeWindowCoveringInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeWindowCoveringModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo windowCoveringmodeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeWindowCoveringModeCommandParams.put("value", windowCoveringmodeCommandParameterInfo);
    InteractionInfo writeWindowCoveringModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.WindowCoveringCluster) cluster)
                  .writeModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeWindowCoveringModeCommandParams);
    writeWindowCoveringInteractionInfo.put(
        "writeModeAttribute", writeWindowCoveringModeAttributeInteractionInfo);
    writeAttributeMap.put("windowCovering", writeWindowCoveringInteractionInfo);
    Map<String, InteractionInfo> writeBarrierControlInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBarrierControlBarrierOpenEventsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo barrierControlbarrierOpenEventsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBarrierControlBarrierOpenEventsCommandParams.put(
        "value", barrierControlbarrierOpenEventsCommandParameterInfo);
    InteractionInfo writeBarrierControlBarrierOpenEventsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .writeBarrierOpenEventsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBarrierControlBarrierOpenEventsCommandParams);
    writeBarrierControlInteractionInfo.put(
        "writeBarrierOpenEventsAttribute",
        writeBarrierControlBarrierOpenEventsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBarrierControlBarrierCloseEventsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo barrierControlbarrierCloseEventsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBarrierControlBarrierCloseEventsCommandParams.put(
        "value", barrierControlbarrierCloseEventsCommandParameterInfo);
    InteractionInfo writeBarrierControlBarrierCloseEventsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .writeBarrierCloseEventsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBarrierControlBarrierCloseEventsCommandParams);
    writeBarrierControlInteractionInfo.put(
        "writeBarrierCloseEventsAttribute",
        writeBarrierControlBarrierCloseEventsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBarrierControlBarrierCommandOpenEventsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo barrierControlbarrierCommandOpenEventsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBarrierControlBarrierCommandOpenEventsCommandParams.put(
        "value", barrierControlbarrierCommandOpenEventsCommandParameterInfo);
    InteractionInfo writeBarrierControlBarrierCommandOpenEventsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .writeBarrierCommandOpenEventsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBarrierControlBarrierCommandOpenEventsCommandParams);
    writeBarrierControlInteractionInfo.put(
        "writeBarrierCommandOpenEventsAttribute",
        writeBarrierControlBarrierCommandOpenEventsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBarrierControlBarrierCommandCloseEventsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo barrierControlbarrierCommandCloseEventsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBarrierControlBarrierCommandCloseEventsCommandParams.put(
        "value", barrierControlbarrierCommandCloseEventsCommandParameterInfo);
    InteractionInfo writeBarrierControlBarrierCommandCloseEventsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .writeBarrierCommandCloseEventsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBarrierControlBarrierCommandCloseEventsCommandParams);
    writeBarrierControlInteractionInfo.put(
        "writeBarrierCommandCloseEventsAttribute",
        writeBarrierControlBarrierCommandCloseEventsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBarrierControlBarrierOpenPeriodCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo barrierControlbarrierOpenPeriodCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBarrierControlBarrierOpenPeriodCommandParams.put(
        "value", barrierControlbarrierOpenPeriodCommandParameterInfo);
    InteractionInfo writeBarrierControlBarrierOpenPeriodAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .writeBarrierOpenPeriodAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBarrierControlBarrierOpenPeriodCommandParams);
    writeBarrierControlInteractionInfo.put(
        "writeBarrierOpenPeriodAttribute",
        writeBarrierControlBarrierOpenPeriodAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBarrierControlBarrierClosePeriodCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo barrierControlbarrierClosePeriodCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBarrierControlBarrierClosePeriodCommandParams.put(
        "value", barrierControlbarrierClosePeriodCommandParameterInfo);
    InteractionInfo writeBarrierControlBarrierClosePeriodAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BarrierControlCluster) cluster)
                  .writeBarrierClosePeriodAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBarrierControlBarrierClosePeriodCommandParams);
    writeBarrierControlInteractionInfo.put(
        "writeBarrierClosePeriodAttribute",
        writeBarrierControlBarrierClosePeriodAttributeInteractionInfo);
    writeAttributeMap.put("barrierControl", writeBarrierControlInteractionInfo);
    Map<String, InteractionInfo> writePumpConfigurationAndControlInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        writePumpConfigurationAndControlLifetimeRunningHoursCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControllifetimeRunningHoursCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writePumpConfigurationAndControlLifetimeRunningHoursCommandParams.put(
        "value", pumpConfigurationAndControllifetimeRunningHoursCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlLifetimeRunningHoursAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeLifetimeRunningHoursAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlLifetimeRunningHoursCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeLifetimeRunningHoursAttribute",
        writePumpConfigurationAndControlLifetimeRunningHoursAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writePumpConfigurationAndControlLifetimeEnergyConsumedCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControllifetimeEnergyConsumedCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writePumpConfigurationAndControlLifetimeEnergyConsumedCommandParams.put(
        "value", pumpConfigurationAndControllifetimeEnergyConsumedCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlLifetimeEnergyConsumedAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeLifetimeEnergyConsumedAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlLifetimeEnergyConsumedCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeLifetimeEnergyConsumedAttribute",
        writePumpConfigurationAndControlLifetimeEnergyConsumedAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writePumpConfigurationAndControlOperationModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControloperationModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writePumpConfigurationAndControlOperationModeCommandParams.put(
        "value", pumpConfigurationAndControloperationModeCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlOperationModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeOperationModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlOperationModeCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeOperationModeAttribute",
        writePumpConfigurationAndControlOperationModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writePumpConfigurationAndControlControlModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo pumpConfigurationAndControlcontrolModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writePumpConfigurationAndControlControlModeCommandParams.put(
        "value", pumpConfigurationAndControlcontrolModeCommandParameterInfo);
    InteractionInfo writePumpConfigurationAndControlControlModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.PumpConfigurationAndControlCluster) cluster)
                  .writeControlModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writePumpConfigurationAndControlControlModeCommandParams);
    writePumpConfigurationAndControlInteractionInfo.put(
        "writeControlModeAttribute",
        writePumpConfigurationAndControlControlModeAttributeInteractionInfo);
    writeAttributeMap.put(
        "pumpConfigurationAndControl", writePumpConfigurationAndControlInteractionInfo);
    Map<String, InteractionInfo> writeThermostatInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeThermostatHVACSystemTypeConfigurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatHVACSystemTypeConfigurationCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatHVACSystemTypeConfigurationCommandParams.put(
        "value", thermostatHVACSystemTypeConfigurationCommandParameterInfo);
    InteractionInfo writeThermostatHVACSystemTypeConfigurationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeHVACSystemTypeConfigurationAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatHVACSystemTypeConfigurationCommandParams);
    writeThermostatInteractionInfo.put(
        "writeHVACSystemTypeConfigurationAttribute",
        writeThermostatHVACSystemTypeConfigurationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatLocalTemperatureCalibrationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatlocalTemperatureCalibrationCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatLocalTemperatureCalibrationCommandParams.put(
        "value", thermostatlocalTemperatureCalibrationCommandParameterInfo);
    InteractionInfo writeThermostatLocalTemperatureCalibrationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeLocalTemperatureCalibrationAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatLocalTemperatureCalibrationCommandParams);
    writeThermostatInteractionInfo.put(
        "writeLocalTemperatureCalibrationAttribute",
        writeThermostatLocalTemperatureCalibrationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatOccupiedCoolingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatoccupiedCoolingSetpointCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatOccupiedCoolingSetpointCommandParams.put(
        "value", thermostatoccupiedCoolingSetpointCommandParameterInfo);
    InteractionInfo writeThermostatOccupiedCoolingSetpointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeOccupiedCoolingSetpointAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatOccupiedCoolingSetpointCommandParams);
    writeThermostatInteractionInfo.put(
        "writeOccupiedCoolingSetpointAttribute",
        writeThermostatOccupiedCoolingSetpointAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatOccupiedHeatingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatoccupiedHeatingSetpointCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatOccupiedHeatingSetpointCommandParams.put(
        "value", thermostatoccupiedHeatingSetpointCommandParameterInfo);
    InteractionInfo writeThermostatOccupiedHeatingSetpointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeOccupiedHeatingSetpointAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatOccupiedHeatingSetpointCommandParams);
    writeThermostatInteractionInfo.put(
        "writeOccupiedHeatingSetpointAttribute",
        writeThermostatOccupiedHeatingSetpointAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatUnoccupiedCoolingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatunoccupiedCoolingSetpointCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUnoccupiedCoolingSetpointCommandParams.put(
        "value", thermostatunoccupiedCoolingSetpointCommandParameterInfo);
    InteractionInfo writeThermostatUnoccupiedCoolingSetpointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeUnoccupiedCoolingSetpointAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatUnoccupiedCoolingSetpointCommandParams);
    writeThermostatInteractionInfo.put(
        "writeUnoccupiedCoolingSetpointAttribute",
        writeThermostatUnoccupiedCoolingSetpointAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatUnoccupiedHeatingSetpointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatunoccupiedHeatingSetpointCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUnoccupiedHeatingSetpointCommandParams.put(
        "value", thermostatunoccupiedHeatingSetpointCommandParameterInfo);
    InteractionInfo writeThermostatUnoccupiedHeatingSetpointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeUnoccupiedHeatingSetpointAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatUnoccupiedHeatingSetpointCommandParams);
    writeThermostatInteractionInfo.put(
        "writeUnoccupiedHeatingSetpointAttribute",
        writeThermostatUnoccupiedHeatingSetpointAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMinHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatminHeatSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMinHeatSetpointLimitCommandParams.put(
        "value", thermostatminHeatSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMinHeatSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMinHeatSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMinHeatSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMinHeatSetpointLimitAttribute",
        writeThermostatMinHeatSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMaxHeatSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatmaxHeatSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMaxHeatSetpointLimitCommandParams.put(
        "value", thermostatmaxHeatSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMaxHeatSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMaxHeatSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMaxHeatSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMaxHeatSetpointLimitAttribute",
        writeThermostatMaxHeatSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMinCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatminCoolSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMinCoolSetpointLimitCommandParams.put(
        "value", thermostatminCoolSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMinCoolSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMinCoolSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMinCoolSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMinCoolSetpointLimitAttribute",
        writeThermostatMinCoolSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMaxCoolSetpointLimitCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatmaxCoolSetpointLimitCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMaxCoolSetpointLimitCommandParams.put(
        "value", thermostatmaxCoolSetpointLimitCommandParameterInfo);
    InteractionInfo writeThermostatMaxCoolSetpointLimitAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMaxCoolSetpointLimitAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMaxCoolSetpointLimitCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMaxCoolSetpointLimitAttribute",
        writeThermostatMaxCoolSetpointLimitAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatMinSetpointDeadBandCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatminSetpointDeadBandCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatMinSetpointDeadBandCommandParams.put(
        "value", thermostatminSetpointDeadBandCommandParameterInfo);
    InteractionInfo writeThermostatMinSetpointDeadBandAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeMinSetpointDeadBandAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatMinSetpointDeadBandCommandParams);
    writeThermostatInteractionInfo.put(
        "writeMinSetpointDeadBandAttribute",
        writeThermostatMinSetpointDeadBandAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatRemoteSensingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatremoteSensingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatRemoteSensingCommandParams.put(
        "value", thermostatremoteSensingCommandParameterInfo);
    InteractionInfo writeThermostatRemoteSensingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeRemoteSensingAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatRemoteSensingCommandParams);
    writeThermostatInteractionInfo.put(
        "writeRemoteSensingAttribute", writeThermostatRemoteSensingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatControlSequenceOfOperationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatcontrolSequenceOfOperationCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatControlSequenceOfOperationCommandParams.put(
        "value", thermostatcontrolSequenceOfOperationCommandParameterInfo);
    InteractionInfo writeThermostatControlSequenceOfOperationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeControlSequenceOfOperationAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatControlSequenceOfOperationCommandParams);
    writeThermostatInteractionInfo.put(
        "writeControlSequenceOfOperationAttribute",
        writeThermostatControlSequenceOfOperationAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatSystemModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatsystemModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatSystemModeCommandParams.put("value", thermostatsystemModeCommandParameterInfo);
    InteractionInfo writeThermostatSystemModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeSystemModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatSystemModeCommandParams);
    writeThermostatInteractionInfo.put(
        "writeSystemModeAttribute", writeThermostatSystemModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatTemperatureSetpointHoldCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostattemperatureSetpointHoldCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatTemperatureSetpointHoldCommandParams.put(
        "value", thermostattemperatureSetpointHoldCommandParameterInfo);
    InteractionInfo writeThermostatTemperatureSetpointHoldAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeTemperatureSetpointHoldAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatTemperatureSetpointHoldCommandParams);
    writeThermostatInteractionInfo.put(
        "writeTemperatureSetpointHoldAttribute",
        writeThermostatTemperatureSetpointHoldAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatTemperatureSetpointHoldDurationCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostattemperatureSetpointHoldDurationCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatTemperatureSetpointHoldDurationCommandParams.put(
        "value", thermostattemperatureSetpointHoldDurationCommandParameterInfo);
    InteractionInfo writeThermostatTemperatureSetpointHoldDurationAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeTemperatureSetpointHoldDurationAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatTemperatureSetpointHoldDurationCommandParams);
    writeThermostatInteractionInfo.put(
        "writeTemperatureSetpointHoldDurationAttribute",
        writeThermostatTemperatureSetpointHoldDurationAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeThermostatThermostatProgrammingOperationModeCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatthermostatProgrammingOperationModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatThermostatProgrammingOperationModeCommandParams.put(
        "value", thermostatthermostatProgrammingOperationModeCommandParameterInfo);
    InteractionInfo writeThermostatThermostatProgrammingOperationModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeThermostatProgrammingOperationModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatThermostatProgrammingOperationModeCommandParams);
    writeThermostatInteractionInfo.put(
        "writeThermostatProgrammingOperationModeAttribute",
        writeThermostatThermostatProgrammingOperationModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatOccupiedSetbackCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatoccupiedSetbackCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatOccupiedSetbackCommandParams.put(
        "value", thermostatoccupiedSetbackCommandParameterInfo);
    InteractionInfo writeThermostatOccupiedSetbackAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeOccupiedSetbackAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatOccupiedSetbackCommandParams);
    writeThermostatInteractionInfo.put(
        "writeOccupiedSetbackAttribute", writeThermostatOccupiedSetbackAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatUnoccupiedSetbackCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatunoccupiedSetbackCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUnoccupiedSetbackCommandParams.put(
        "value", thermostatunoccupiedSetbackCommandParameterInfo);
    InteractionInfo writeThermostatUnoccupiedSetbackAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeUnoccupiedSetbackAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatUnoccupiedSetbackCommandParams);
    writeThermostatInteractionInfo.put(
        "writeUnoccupiedSetbackAttribute",
        writeThermostatUnoccupiedSetbackAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatEmergencyHeatDeltaCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatemergencyHeatDeltaCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatEmergencyHeatDeltaCommandParams.put(
        "value", thermostatemergencyHeatDeltaCommandParameterInfo);
    InteractionInfo writeThermostatEmergencyHeatDeltaAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeEmergencyHeatDeltaAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatEmergencyHeatDeltaCommandParams);
    writeThermostatInteractionInfo.put(
        "writeEmergencyHeatDeltaAttribute",
        writeThermostatEmergencyHeatDeltaAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatACTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatACTypeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatACTypeCommandParams.put("value", thermostatACTypeCommandParameterInfo);
    InteractionInfo writeThermostatACTypeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeACTypeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatACTypeCommandParams);
    writeThermostatInteractionInfo.put(
        "writeACTypeAttribute", writeThermostatACTypeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatACCapacityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatACCapacityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatACCapacityCommandParams.put("value", thermostatACCapacityCommandParameterInfo);
    InteractionInfo writeThermostatACCapacityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeACCapacityAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatACCapacityCommandParams);
    writeThermostatInteractionInfo.put(
        "writeACCapacityAttribute", writeThermostatACCapacityAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatACRefrigerantTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatACRefrigerantTypeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatACRefrigerantTypeCommandParams.put(
        "value", thermostatACRefrigerantTypeCommandParameterInfo);
    InteractionInfo writeThermostatACRefrigerantTypeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeACRefrigerantTypeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatACRefrigerantTypeCommandParams);
    writeThermostatInteractionInfo.put(
        "writeACRefrigerantTypeAttribute",
        writeThermostatACRefrigerantTypeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatACCompressorTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatACCompressorTypeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatACCompressorTypeCommandParams.put(
        "value", thermostatACCompressorTypeCommandParameterInfo);
    InteractionInfo writeThermostatACCompressorTypeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeACCompressorTypeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatACCompressorTypeCommandParams);
    writeThermostatInteractionInfo.put(
        "writeACCompressorTypeAttribute", writeThermostatACCompressorTypeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatACErrorCodeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatACErrorCodeCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeThermostatACErrorCodeCommandParams.put("value", thermostatACErrorCodeCommandParameterInfo);
    InteractionInfo writeThermostatACErrorCodeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeACErrorCodeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatACErrorCodeCommandParams);
    writeThermostatInteractionInfo.put(
        "writeACErrorCodeAttribute", writeThermostatACErrorCodeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatACLouverPositionCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatACLouverPositionCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatACLouverPositionCommandParams.put(
        "value", thermostatACLouverPositionCommandParameterInfo);
    InteractionInfo writeThermostatACLouverPositionAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeACLouverPositionAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatACLouverPositionCommandParams);
    writeThermostatInteractionInfo.put(
        "writeACLouverPositionAttribute", writeThermostatACLouverPositionAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeThermostatACCapacityformatCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatACCapacityformatCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatACCapacityformatCommandParams.put(
        "value", thermostatACCapacityformatCommandParameterInfo);
    InteractionInfo writeThermostatACCapacityformatAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatCluster) cluster)
                  .writeACCapacityformatAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatACCapacityformatCommandParams);
    writeThermostatInteractionInfo.put(
        "writeACCapacityformatAttribute", writeThermostatACCapacityformatAttributeInteractionInfo);
    writeAttributeMap.put("thermostat", writeThermostatInteractionInfo);
    Map<String, InteractionInfo> writeFanControlInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeFanControlFanModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlfanModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlFanModeCommandParams.put("value", fanControlfanModeCommandParameterInfo);
    InteractionInfo writeFanControlFanModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeFanModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlFanModeCommandParams);
    writeFanControlInteractionInfo.put(
        "writeFanModeAttribute", writeFanControlFanModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlFanModeSequenceCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlfanModeSequenceCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlFanModeSequenceCommandParams.put(
        "value", fanControlfanModeSequenceCommandParameterInfo);
    InteractionInfo writeFanControlFanModeSequenceAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeFanModeSequenceAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlFanModeSequenceCommandParams);
    writeFanControlInteractionInfo.put(
        "writeFanModeSequenceAttribute", writeFanControlFanModeSequenceAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlPercentSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlpercentSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlPercentSettingCommandParams.put(
        "value", fanControlpercentSettingCommandParameterInfo);
    InteractionInfo writeFanControlPercentSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writePercentSettingAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlPercentSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writePercentSettingAttribute", writeFanControlPercentSettingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlSpeedSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlspeedSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlSpeedSettingCommandParams.put(
        "value", fanControlspeedSettingCommandParameterInfo);
    InteractionInfo writeFanControlSpeedSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeSpeedSettingAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlSpeedSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writeSpeedSettingAttribute", writeFanControlSpeedSettingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlRockSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlrockSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlRockSettingCommandParams.put("value", fanControlrockSettingCommandParameterInfo);
    InteractionInfo writeFanControlRockSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeRockSettingAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlRockSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writeRockSettingAttribute", writeFanControlRockSettingAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeFanControlWindSettingCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo fanControlwindSettingCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeFanControlWindSettingCommandParams.put("value", fanControlwindSettingCommandParameterInfo);
    InteractionInfo writeFanControlWindSettingAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.FanControlCluster) cluster)
                  .writeWindSettingAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeFanControlWindSettingCommandParams);
    writeFanControlInteractionInfo.put(
        "writeWindSettingAttribute", writeFanControlWindSettingAttributeInteractionInfo);
    writeAttributeMap.put("fanControl", writeFanControlInteractionInfo);
    Map<String, InteractionInfo> writeThermostatUserInterfaceConfigurationInteractionInfo =
        new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        writeThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        thermostatUserInterfaceConfigurationtemperatureDisplayModeCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams.put(
        "value", thermostatUserInterfaceConfigurationtemperatureDisplayModeCommandParameterInfo);
    InteractionInfo
        writeThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                      .writeTemperatureDisplayModeAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeThermostatUserInterfaceConfigurationTemperatureDisplayModeCommandParams);
    writeThermostatUserInterfaceConfigurationInteractionInfo.put(
        "writeTemperatureDisplayModeAttribute",
        writeThermostatUserInterfaceConfigurationTemperatureDisplayModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeThermostatUserInterfaceConfigurationKeypadLockoutCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo thermostatUserInterfaceConfigurationkeypadLockoutCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUserInterfaceConfigurationKeypadLockoutCommandParams.put(
        "value", thermostatUserInterfaceConfigurationkeypadLockoutCommandParameterInfo);
    InteractionInfo writeThermostatUserInterfaceConfigurationKeypadLockoutAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                  .writeKeypadLockoutAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeThermostatUserInterfaceConfigurationKeypadLockoutCommandParams);
    writeThermostatUserInterfaceConfigurationInteractionInfo.put(
        "writeKeypadLockoutAttribute",
        writeThermostatUserInterfaceConfigurationKeypadLockoutAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        thermostatUserInterfaceConfigurationscheduleProgrammingVisibilityCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams.put(
        "value",
        thermostatUserInterfaceConfigurationscheduleProgrammingVisibilityCommandParameterInfo);
    InteractionInfo
        writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.ThermostatUserInterfaceConfigurationCluster) cluster)
                      .writeScheduleProgrammingVisibilityAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityCommandParams);
    writeThermostatUserInterfaceConfigurationInteractionInfo.put(
        "writeScheduleProgrammingVisibilityAttribute",
        writeThermostatUserInterfaceConfigurationScheduleProgrammingVisibilityAttributeInteractionInfo);
    writeAttributeMap.put(
        "thermostatUserInterfaceConfiguration",
        writeThermostatUserInterfaceConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeColorControlInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeColorControlOptionsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControloptionsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlOptionsCommandParams.put("value", colorControloptionsCommandParameterInfo);
    InteractionInfo writeColorControlOptionsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeOptionsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlOptionsCommandParams);
    writeColorControlInteractionInfo.put(
        "writeOptionsAttribute", writeColorControlOptionsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlWhitePointXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlwhitePointXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlWhitePointXCommandParams.put(
        "value", colorControlwhitePointXCommandParameterInfo);
    InteractionInfo writeColorControlWhitePointXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeWhitePointXAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlWhitePointXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeWhitePointXAttribute", writeColorControlWhitePointXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlWhitePointYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlwhitePointYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlWhitePointYCommandParams.put(
        "value", colorControlwhitePointYCommandParameterInfo);
    InteractionInfo writeColorControlWhitePointYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeWhitePointYAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlWhitePointYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeWhitePointYAttribute", writeColorControlWhitePointYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointRXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointRXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointRXCommandParams.put(
        "value", colorControlcolorPointRXCommandParameterInfo);
    InteractionInfo writeColorControlColorPointRXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointRXAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointRXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointRXAttribute", writeColorControlColorPointRXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointRYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointRYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointRYCommandParams.put(
        "value", colorControlcolorPointRYCommandParameterInfo);
    InteractionInfo writeColorControlColorPointRYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointRYAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointRYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointRYAttribute", writeColorControlColorPointRYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointRIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointRIntensityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointRIntensityCommandParams.put(
        "value", colorControlcolorPointRIntensityCommandParameterInfo);
    InteractionInfo writeColorControlColorPointRIntensityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointRIntensityAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointRIntensityCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointRIntensityAttribute",
        writeColorControlColorPointRIntensityAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointGXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointGXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointGXCommandParams.put(
        "value", colorControlcolorPointGXCommandParameterInfo);
    InteractionInfo writeColorControlColorPointGXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointGXAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointGXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointGXAttribute", writeColorControlColorPointGXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointGYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointGYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointGYCommandParams.put(
        "value", colorControlcolorPointGYCommandParameterInfo);
    InteractionInfo writeColorControlColorPointGYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointGYAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointGYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointGYAttribute", writeColorControlColorPointGYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointGIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointGIntensityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointGIntensityCommandParams.put(
        "value", colorControlcolorPointGIntensityCommandParameterInfo);
    InteractionInfo writeColorControlColorPointGIntensityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointGIntensityAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointGIntensityCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointGIntensityAttribute",
        writeColorControlColorPointGIntensityAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointBXCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointBXCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointBXCommandParams.put(
        "value", colorControlcolorPointBXCommandParameterInfo);
    InteractionInfo writeColorControlColorPointBXAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointBXAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointBXCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointBXAttribute", writeColorControlColorPointBXAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointBYCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointBYCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointBYCommandParams.put(
        "value", colorControlcolorPointBYCommandParameterInfo);
    InteractionInfo writeColorControlColorPointBYAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointBYAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointBYCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointBYAttribute", writeColorControlColorPointBYAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlColorPointBIntensityCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlcolorPointBIntensityCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlColorPointBIntensityCommandParams.put(
        "value", colorControlcolorPointBIntensityCommandParameterInfo);
    InteractionInfo writeColorControlColorPointBIntensityAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeColorPointBIntensityAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlColorPointBIntensityCommandParams);
    writeColorControlInteractionInfo.put(
        "writeColorPointBIntensityAttribute",
        writeColorControlColorPointBIntensityAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeColorControlStartUpColorTemperatureMiredsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo colorControlstartUpColorTemperatureMiredsCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeColorControlStartUpColorTemperatureMiredsCommandParams.put(
        "value", colorControlstartUpColorTemperatureMiredsCommandParameterInfo);
    InteractionInfo writeColorControlStartUpColorTemperatureMiredsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ColorControlCluster) cluster)
                  .writeStartUpColorTemperatureMiredsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeColorControlStartUpColorTemperatureMiredsCommandParams);
    writeColorControlInteractionInfo.put(
        "writeStartUpColorTemperatureMiredsAttribute",
        writeColorControlStartUpColorTemperatureMiredsAttributeInteractionInfo);
    writeAttributeMap.put("colorControl", writeColorControlInteractionInfo);
    Map<String, InteractionInfo> writeBallastConfigurationInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeBallastConfigurationMinLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationminLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationMinLevelCommandParams.put(
        "value", ballastConfigurationminLevelCommandParameterInfo);
    InteractionInfo writeBallastConfigurationMinLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeMinLevelAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationMinLevelCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeMinLevelAttribute", writeBallastConfigurationMinLevelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationMaxLevelCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationmaxLevelCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationMaxLevelCommandParams.put(
        "value", ballastConfigurationmaxLevelCommandParameterInfo);
    InteractionInfo writeBallastConfigurationMaxLevelAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeMaxLevelAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationMaxLevelCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeMaxLevelAttribute", writeBallastConfigurationMaxLevelAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationIntrinsicBalanceFactorCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationintrinsicBalanceFactorCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationIntrinsicBalanceFactorCommandParams.put(
        "value", ballastConfigurationintrinsicBalanceFactorCommandParameterInfo);
    InteractionInfo writeBallastConfigurationIntrinsicBalanceFactorAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeIntrinsicBalanceFactorAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationIntrinsicBalanceFactorCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeIntrinsicBalanceFactorAttribute",
        writeBallastConfigurationIntrinsicBalanceFactorAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeBallastConfigurationBallastFactorAdjustmentCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationballastFactorAdjustmentCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationBallastFactorAdjustmentCommandParams.put(
        "value", ballastConfigurationballastFactorAdjustmentCommandParameterInfo);
    InteractionInfo writeBallastConfigurationBallastFactorAdjustmentAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeBallastFactorAdjustmentAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationBallastFactorAdjustmentCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeBallastFactorAdjustmentAttribute",
        writeBallastConfigurationBallastFactorAdjustmentAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampTypeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampTypeCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBallastConfigurationLampTypeCommandParams.put(
        "value", ballastConfigurationlampTypeCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampTypeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampTypeAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampTypeCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampTypeAttribute", writeBallastConfigurationLampTypeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampManufacturerCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampManufacturerCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeBallastConfigurationLampManufacturerCommandParams.put(
        "value", ballastConfigurationlampManufacturerCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampManufacturerAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampManufacturerAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampManufacturerCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampManufacturerAttribute",
        writeBallastConfigurationLampManufacturerAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampRatedHoursCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampRatedHoursCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeBallastConfigurationLampRatedHoursCommandParams.put(
        "value", ballastConfigurationlampRatedHoursCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampRatedHoursAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampRatedHoursAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampRatedHoursCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampRatedHoursAttribute",
        writeBallastConfigurationLampRatedHoursAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampBurnHoursCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampBurnHoursCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeBallastConfigurationLampBurnHoursCommandParams.put(
        "value", ballastConfigurationlampBurnHoursCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampBurnHoursAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampBurnHoursAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampBurnHoursCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampBurnHoursAttribute",
        writeBallastConfigurationLampBurnHoursAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampAlarmModeCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampAlarmModeCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeBallastConfigurationLampAlarmModeCommandParams.put(
        "value", ballastConfigurationlampAlarmModeCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampAlarmModeAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampAlarmModeAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampAlarmModeCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampAlarmModeAttribute",
        writeBallastConfigurationLampAlarmModeAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeBallastConfigurationLampBurnHoursTripPointCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo ballastConfigurationlampBurnHoursTripPointCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeBallastConfigurationLampBurnHoursTripPointCommandParams.put(
        "value", ballastConfigurationlampBurnHoursTripPointCommandParameterInfo);
    InteractionInfo writeBallastConfigurationLampBurnHoursTripPointAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.BallastConfigurationCluster) cluster)
                  .writeLampBurnHoursTripPointAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeBallastConfigurationLampBurnHoursTripPointCommandParams);
    writeBallastConfigurationInteractionInfo.put(
        "writeLampBurnHoursTripPointAttribute",
        writeBallastConfigurationLampBurnHoursTripPointAttributeInteractionInfo);
    writeAttributeMap.put("ballastConfiguration", writeBallastConfigurationInteractionInfo);
    Map<String, InteractionInfo> writeIlluminanceMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("illuminanceMeasurement", writeIlluminanceMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeTemperatureMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("temperatureMeasurement", writeTemperatureMeasurementInteractionInfo);
    Map<String, InteractionInfo> writePressureMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("pressureMeasurement", writePressureMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeFlowMeasurementInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("flowMeasurement", writeFlowMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeRelativeHumidityMeasurementInteractionInfo =
        new LinkedHashMap<>();
    writeAttributeMap.put(
        "relativeHumidityMeasurement", writeRelativeHumidityMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeOccupancySensingInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        writeOccupancySensingPirOccupiedToUnoccupiedDelayCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo occupancySensingpirOccupiedToUnoccupiedDelayCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingPirOccupiedToUnoccupiedDelayCommandParams.put(
        "value", occupancySensingpirOccupiedToUnoccupiedDelayCommandParameterInfo);
    InteractionInfo writeOccupancySensingPirOccupiedToUnoccupiedDelayAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OccupancySensingCluster) cluster)
                  .writePirOccupiedToUnoccupiedDelayAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOccupancySensingPirOccupiedToUnoccupiedDelayCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writePirOccupiedToUnoccupiedDelayAttribute",
        writeOccupancySensingPirOccupiedToUnoccupiedDelayAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingPirUnoccupiedToOccupiedDelayCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo occupancySensingpirUnoccupiedToOccupiedDelayCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingPirUnoccupiedToOccupiedDelayCommandParams.put(
        "value", occupancySensingpirUnoccupiedToOccupiedDelayCommandParameterInfo);
    InteractionInfo writeOccupancySensingPirUnoccupiedToOccupiedDelayAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OccupancySensingCluster) cluster)
                  .writePirUnoccupiedToOccupiedDelayAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOccupancySensingPirUnoccupiedToOccupiedDelayCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writePirUnoccupiedToOccupiedDelayAttribute",
        writeOccupancySensingPirUnoccupiedToOccupiedDelayAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingPirUnoccupiedToOccupiedThresholdCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo occupancySensingpirUnoccupiedToOccupiedThresholdCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingPirUnoccupiedToOccupiedThresholdCommandParams.put(
        "value", occupancySensingpirUnoccupiedToOccupiedThresholdCommandParameterInfo);
    InteractionInfo writeOccupancySensingPirUnoccupiedToOccupiedThresholdAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.OccupancySensingCluster) cluster)
                  .writePirUnoccupiedToOccupiedThresholdAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeOccupancySensingPirUnoccupiedToOccupiedThresholdCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writePirUnoccupiedToOccupiedThresholdAttribute",
        writeOccupancySensingPirUnoccupiedToOccupiedThresholdAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingUltrasonicOccupiedToUnoccupiedDelayCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo occupancySensingultrasonicOccupiedToUnoccupiedDelayCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingUltrasonicOccupiedToUnoccupiedDelayCommandParams.put(
        "value", occupancySensingultrasonicOccupiedToUnoccupiedDelayCommandParameterInfo);
    InteractionInfo
        writeOccupancySensingUltrasonicOccupiedToUnoccupiedDelayAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.OccupancySensingCluster) cluster)
                      .writeUltrasonicOccupiedToUnoccupiedDelayAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeOccupancySensingUltrasonicOccupiedToUnoccupiedDelayCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writeUltrasonicOccupiedToUnoccupiedDelayAttribute",
        writeOccupancySensingUltrasonicOccupiedToUnoccupiedDelayAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingUltrasonicUnoccupiedToOccupiedDelayCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo occupancySensingultrasonicUnoccupiedToOccupiedDelayCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingUltrasonicUnoccupiedToOccupiedDelayCommandParams.put(
        "value", occupancySensingultrasonicUnoccupiedToOccupiedDelayCommandParameterInfo);
    InteractionInfo
        writeOccupancySensingUltrasonicUnoccupiedToOccupiedDelayAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.OccupancySensingCluster) cluster)
                      .writeUltrasonicUnoccupiedToOccupiedDelayAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeOccupancySensingUltrasonicUnoccupiedToOccupiedDelayCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writeUltrasonicUnoccupiedToOccupiedDelayAttribute",
        writeOccupancySensingUltrasonicUnoccupiedToOccupiedDelayAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        occupancySensingultrasonicUnoccupiedToOccupiedThresholdCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdCommandParams.put(
        "value", occupancySensingultrasonicUnoccupiedToOccupiedThresholdCommandParameterInfo);
    InteractionInfo
        writeOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.OccupancySensingCluster) cluster)
                      .writeUltrasonicUnoccupiedToOccupiedThresholdAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writeUltrasonicUnoccupiedToOccupiedThresholdAttribute",
        writeOccupancySensingUltrasonicUnoccupiedToOccupiedThresholdAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        occupancySensingphysicalContactOccupiedToUnoccupiedDelayCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayCommandParams.put(
        "value", occupancySensingphysicalContactOccupiedToUnoccupiedDelayCommandParameterInfo);
    InteractionInfo
        writeOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.OccupancySensingCluster) cluster)
                      .writePhysicalContactOccupiedToUnoccupiedDelayAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writePhysicalContactOccupiedToUnoccupiedDelayAttribute",
        writeOccupancySensingPhysicalContactOccupiedToUnoccupiedDelayAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        occupancySensingphysicalContactUnoccupiedToOccupiedDelayCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayCommandParams.put(
        "value", occupancySensingphysicalContactUnoccupiedToOccupiedDelayCommandParameterInfo);
    InteractionInfo
        writeOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.OccupancySensingCluster) cluster)
                      .writePhysicalContactUnoccupiedToOccupiedDelayAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writePhysicalContactUnoccupiedToOccupiedDelayAttribute",
        writeOccupancySensingPhysicalContactUnoccupiedToOccupiedDelayAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        occupancySensingphysicalContactUnoccupiedToOccupiedThresholdCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdCommandParams.put(
        "value", occupancySensingphysicalContactUnoccupiedToOccupiedThresholdCommandParameterInfo);
    InteractionInfo
        writeOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.OccupancySensingCluster) cluster)
                      .writePhysicalContactUnoccupiedToOccupiedThresholdAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdCommandParams);
    writeOccupancySensingInteractionInfo.put(
        "writePhysicalContactUnoccupiedToOccupiedThresholdAttribute",
        writeOccupancySensingPhysicalContactUnoccupiedToOccupiedThresholdAttributeInteractionInfo);
    writeAttributeMap.put("occupancySensing", writeOccupancySensingInteractionInfo);
    Map<String, InteractionInfo> writeWakeOnLanInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("wakeOnLan", writeWakeOnLanInteractionInfo);
    Map<String, InteractionInfo> writeChannelInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("channel", writeChannelInteractionInfo);
    Map<String, InteractionInfo> writeTargetNavigatorInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("targetNavigator", writeTargetNavigatorInteractionInfo);
    Map<String, InteractionInfo> writeMediaPlaybackInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("mediaPlayback", writeMediaPlaybackInteractionInfo);
    Map<String, InteractionInfo> writeMediaInputInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("mediaInput", writeMediaInputInteractionInfo);
    Map<String, InteractionInfo> writeLowPowerInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("lowPower", writeLowPowerInteractionInfo);
    Map<String, InteractionInfo> writeKeypadInputInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("keypadInput", writeKeypadInputInteractionInfo);
    Map<String, InteractionInfo> writeContentLauncherInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeContentLauncherSupportedStreamingProtocolsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo contentLaunchersupportedStreamingProtocolsCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeContentLauncherSupportedStreamingProtocolsCommandParams.put(
        "value", contentLaunchersupportedStreamingProtocolsCommandParameterInfo);
    InteractionInfo writeContentLauncherSupportedStreamingProtocolsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ContentLauncherCluster) cluster)
                  .writeSupportedStreamingProtocolsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeContentLauncherSupportedStreamingProtocolsCommandParams);
    writeContentLauncherInteractionInfo.put(
        "writeSupportedStreamingProtocolsAttribute",
        writeContentLauncherSupportedStreamingProtocolsAttributeInteractionInfo);
    writeAttributeMap.put("contentLauncher", writeContentLauncherInteractionInfo);
    Map<String, InteractionInfo> writeAudioOutputInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("audioOutput", writeAudioOutputInteractionInfo);
    Map<String, InteractionInfo> writeApplicationLauncherInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("applicationLauncher", writeApplicationLauncherInteractionInfo);
    Map<String, InteractionInfo> writeApplicationBasicInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("applicationBasic", writeApplicationBasicInteractionInfo);
    Map<String, InteractionInfo> writeAccountLoginInteractionInfo = new LinkedHashMap<>();
    writeAttributeMap.put("accountLogin", writeAccountLoginInteractionInfo);
    Map<String, InteractionInfo> writeElectricalMeasurementInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo>
        writeElectricalMeasurementAverageRmsVoltageMeasurementPeriodCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo
        electricalMeasurementaverageRmsVoltageMeasurementPeriodCommandParameterInfo =
            new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementAverageRmsVoltageMeasurementPeriodCommandParams.put(
        "value", electricalMeasurementaverageRmsVoltageMeasurementPeriodCommandParameterInfo);
    InteractionInfo
        writeElectricalMeasurementAverageRmsVoltageMeasurementPeriodAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.ElectricalMeasurementCluster) cluster)
                      .writeAverageRmsVoltageMeasurementPeriodAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeElectricalMeasurementAverageRmsVoltageMeasurementPeriodCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeAverageRmsVoltageMeasurementPeriodAttribute",
        writeElectricalMeasurementAverageRmsVoltageMeasurementPeriodAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeElectricalMeasurementAverageRmsUnderVoltageCounterCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo electricalMeasurementaverageRmsUnderVoltageCounterCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementAverageRmsUnderVoltageCounterCommandParams.put(
        "value", electricalMeasurementaverageRmsUnderVoltageCounterCommandParameterInfo);
    InteractionInfo
        writeElectricalMeasurementAverageRmsUnderVoltageCounterAttributeInteractionInfo =
            new InteractionInfo(
                (cluster, callback, commandArguments) -> {
                  ((ChipClusters.ElectricalMeasurementCluster) cluster)
                      .writeAverageRmsUnderVoltageCounterAttribute(
                          (DefaultClusterCallback) callback,
                          (Object) commandArguments.get("value"));
                },
                () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
                writeElectricalMeasurementAverageRmsUnderVoltageCounterCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeAverageRmsUnderVoltageCounterAttribute",
        writeElectricalMeasurementAverageRmsUnderVoltageCounterAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeElectricalMeasurementRmsExtremeOverVoltagePeriodCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo electricalMeasurementrmsExtremeOverVoltagePeriodCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementRmsExtremeOverVoltagePeriodCommandParams.put(
        "value", electricalMeasurementrmsExtremeOverVoltagePeriodCommandParameterInfo);
    InteractionInfo writeElectricalMeasurementRmsExtremeOverVoltagePeriodAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .writeRmsExtremeOverVoltagePeriodAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeElectricalMeasurementRmsExtremeOverVoltagePeriodCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeRmsExtremeOverVoltagePeriodAttribute",
        writeElectricalMeasurementRmsExtremeOverVoltagePeriodAttributeInteractionInfo);
    Map<String, CommandParameterInfo>
        writeElectricalMeasurementRmsExtremeUnderVoltagePeriodCommandParams =
            new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo electricalMeasurementrmsExtremeUnderVoltagePeriodCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementRmsExtremeUnderVoltagePeriodCommandParams.put(
        "value", electricalMeasurementrmsExtremeUnderVoltagePeriodCommandParameterInfo);
    InteractionInfo writeElectricalMeasurementRmsExtremeUnderVoltagePeriodAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .writeRmsExtremeUnderVoltagePeriodAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeElectricalMeasurementRmsExtremeUnderVoltagePeriodCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeRmsExtremeUnderVoltagePeriodAttribute",
        writeElectricalMeasurementRmsExtremeUnderVoltagePeriodAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeElectricalMeasurementRmsVoltageSagPeriodCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo electricalMeasurementrmsVoltageSagPeriodCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementRmsVoltageSagPeriodCommandParams.put(
        "value", electricalMeasurementrmsVoltageSagPeriodCommandParameterInfo);
    InteractionInfo writeElectricalMeasurementRmsVoltageSagPeriodAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .writeRmsVoltageSagPeriodAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeElectricalMeasurementRmsVoltageSagPeriodCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeRmsVoltageSagPeriodAttribute",
        writeElectricalMeasurementRmsVoltageSagPeriodAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeElectricalMeasurementRmsVoltageSwellPeriodCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo electricalMeasurementrmsVoltageSwellPeriodCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementRmsVoltageSwellPeriodCommandParams.put(
        "value", electricalMeasurementrmsVoltageSwellPeriodCommandParameterInfo);
    InteractionInfo writeElectricalMeasurementRmsVoltageSwellPeriodAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .writeRmsVoltageSwellPeriodAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeElectricalMeasurementRmsVoltageSwellPeriodCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeRmsVoltageSwellPeriodAttribute",
        writeElectricalMeasurementRmsVoltageSwellPeriodAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeElectricalMeasurementOverloadAlarmsMaskCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo electricalMeasurementoverloadAlarmsMaskCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementOverloadAlarmsMaskCommandParams.put(
        "value", electricalMeasurementoverloadAlarmsMaskCommandParameterInfo);
    InteractionInfo writeElectricalMeasurementOverloadAlarmsMaskAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .writeOverloadAlarmsMaskAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeElectricalMeasurementOverloadAlarmsMaskCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeOverloadAlarmsMaskAttribute",
        writeElectricalMeasurementOverloadAlarmsMaskAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeElectricalMeasurementAcOverloadAlarmsMaskCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo electricalMeasurementacOverloadAlarmsMaskCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeElectricalMeasurementAcOverloadAlarmsMaskCommandParams.put(
        "value", electricalMeasurementacOverloadAlarmsMaskCommandParameterInfo);
    InteractionInfo writeElectricalMeasurementAcOverloadAlarmsMaskAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.ElectricalMeasurementCluster) cluster)
                  .writeAcOverloadAlarmsMaskAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeElectricalMeasurementAcOverloadAlarmsMaskCommandParams);
    writeElectricalMeasurementInteractionInfo.put(
        "writeAcOverloadAlarmsMaskAttribute",
        writeElectricalMeasurementAcOverloadAlarmsMaskAttributeInteractionInfo);
    writeAttributeMap.put("electricalMeasurement", writeElectricalMeasurementInteractionInfo);
    Map<String, InteractionInfo> writeTestClusterInteractionInfo = new LinkedHashMap<>();
    Map<String, CommandParameterInfo> writeTestClusterBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterbooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestClusterBooleanCommandParams.put("value", testClusterbooleanCommandParameterInfo);
    InteractionInfo writeTestClusterBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeBooleanAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterBooleanCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeBooleanAttribute", writeTestClusterBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterBitmap8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterbitmap8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterBitmap8CommandParams.put("value", testClusterbitmap8CommandParameterInfo);
    InteractionInfo writeTestClusterBitmap8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeBitmap8Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterBitmap8CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeBitmap8Attribute", writeTestClusterBitmap8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterBitmap16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterbitmap16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterBitmap16CommandParams.put("value", testClusterbitmap16CommandParameterInfo);
    InteractionInfo writeTestClusterBitmap16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeBitmap16Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterBitmap16CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeBitmap16Attribute", writeTestClusterBitmap16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterBitmap32CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterbitmap32CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterBitmap32CommandParams.put("value", testClusterbitmap32CommandParameterInfo);
    InteractionInfo writeTestClusterBitmap32AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeBitmap32Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterBitmap32CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeBitmap32Attribute", writeTestClusterBitmap32AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterBitmap64CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterbitmap64CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterBitmap64CommandParams.put("value", testClusterbitmap64CommandParameterInfo);
    InteractionInfo writeTestClusterBitmap64AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeBitmap64Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterBitmap64CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeBitmap64Attribute", writeTestClusterBitmap64AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterInt8uCommandParams.put("value", testClusterint8uCommandParameterInfo);
    InteractionInfo writeTestClusterInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt8uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt8uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt8uAttribute", writeTestClusterInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterInt16uCommandParams.put("value", testClusterint16uCommandParameterInfo);
    InteractionInfo writeTestClusterInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt16uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt16uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt16uAttribute", writeTestClusterInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt24uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint24uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt24uCommandParams.put("value", testClusterint24uCommandParameterInfo);
    InteractionInfo writeTestClusterInt24uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt24uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt24uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt24uAttribute", writeTestClusterInt24uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt32uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint32uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt32uCommandParams.put("value", testClusterint32uCommandParameterInfo);
    InteractionInfo writeTestClusterInt32uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt32uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt32uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt32uAttribute", writeTestClusterInt32uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt40uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint40uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt40uCommandParams.put("value", testClusterint40uCommandParameterInfo);
    InteractionInfo writeTestClusterInt40uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt40uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt40uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt40uAttribute", writeTestClusterInt40uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt48uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint48uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt48uCommandParams.put("value", testClusterint48uCommandParameterInfo);
    InteractionInfo writeTestClusterInt48uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt48uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt48uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt48uAttribute", writeTestClusterInt48uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt56uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint56uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt56uCommandParams.put("value", testClusterint56uCommandParameterInfo);
    InteractionInfo writeTestClusterInt56uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt56uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt56uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt56uAttribute", writeTestClusterInt56uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt64uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint64uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt64uCommandParams.put("value", testClusterint64uCommandParameterInfo);
    InteractionInfo writeTestClusterInt64uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt64uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt64uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt64uAttribute", writeTestClusterInt64uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterInt8sCommandParams.put("value", testClusterint8sCommandParameterInfo);
    InteractionInfo writeTestClusterInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt8sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt8sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt8sAttribute", writeTestClusterInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterInt16sCommandParams.put("value", testClusterint16sCommandParameterInfo);
    InteractionInfo writeTestClusterInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt16sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt16sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt16sAttribute", writeTestClusterInt16sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt24sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint24sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt24sCommandParams.put("value", testClusterint24sCommandParameterInfo);
    InteractionInfo writeTestClusterInt24sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt24sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt24sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt24sAttribute", writeTestClusterInt24sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt32sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint32sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt32sCommandParams.put("value", testClusterint32sCommandParameterInfo);
    InteractionInfo writeTestClusterInt32sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt32sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt32sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt32sAttribute", writeTestClusterInt32sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt40sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint40sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt40sCommandParams.put("value", testClusterint40sCommandParameterInfo);
    InteractionInfo writeTestClusterInt40sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt40sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt40sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt40sAttribute", writeTestClusterInt40sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt48sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint48sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt48sCommandParams.put("value", testClusterint48sCommandParameterInfo);
    InteractionInfo writeTestClusterInt48sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt48sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt48sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt48sAttribute", writeTestClusterInt48sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt56sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint56sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt56sCommandParams.put("value", testClusterint56sCommandParameterInfo);
    InteractionInfo writeTestClusterInt56sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt56sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt56sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt56sAttribute", writeTestClusterInt56sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterInt64sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterint64sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterInt64sCommandParams.put("value", testClusterint64sCommandParameterInfo);
    InteractionInfo writeTestClusterInt64sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeInt64sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterInt64sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeInt64sAttribute", writeTestClusterInt64sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterEnum8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterenum8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterEnum8CommandParams.put("value", testClusterenum8CommandParameterInfo);
    InteractionInfo writeTestClusterEnum8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeEnum8Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterEnum8CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeEnum8Attribute", writeTestClusterEnum8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterEnum16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterenum16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterEnum16CommandParams.put("value", testClusterenum16CommandParameterInfo);
    InteractionInfo writeTestClusterEnum16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeEnum16Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterEnum16CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeEnum16Attribute", writeTestClusterEnum16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterFloatSingleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterfloatSingleCommandParameterInfo =
        new CommandParameterInfo("value", Float.class, Float.class);
    writeTestClusterFloatSingleCommandParams.put(
        "value", testClusterfloatSingleCommandParameterInfo);
    InteractionInfo writeTestClusterFloatSingleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeFloatSingleAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterFloatSingleCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeFloatSingleAttribute", writeTestClusterFloatSingleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterFloatDoubleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterfloatDoubleCommandParameterInfo =
        new CommandParameterInfo("value", Double.class, Double.class);
    writeTestClusterFloatDoubleCommandParams.put(
        "value", testClusterfloatDoubleCommandParameterInfo);
    InteractionInfo writeTestClusterFloatDoubleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeFloatDoubleAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterFloatDoubleCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeFloatDoubleAttribute", writeTestClusterFloatDoubleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusteroctetStringCommandParameterInfo =
        new CommandParameterInfo("value", byte[].class, byte[].class);
    writeTestClusterOctetStringCommandParams.put(
        "value", testClusteroctetStringCommandParameterInfo);
    InteractionInfo writeTestClusterOctetStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeOctetStringAttribute(
                      (DefaultClusterCallback) callback, (byte[]) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterOctetStringCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeOctetStringAttribute", writeTestClusterOctetStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterLongOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterlongOctetStringCommandParameterInfo =
        new CommandParameterInfo("value", byte[].class, byte[].class);
    writeTestClusterLongOctetStringCommandParams.put(
        "value", testClusterlongOctetStringCommandParameterInfo);
    InteractionInfo writeTestClusterLongOctetStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeLongOctetStringAttribute(
                      (DefaultClusterCallback) callback, (byte[]) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterLongOctetStringCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeLongOctetStringAttribute", writeTestClusterLongOctetStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustercharStringCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeTestClusterCharStringCommandParams.put("value", testClustercharStringCommandParameterInfo);
    InteractionInfo writeTestClusterCharStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeCharStringAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterCharStringCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeCharStringAttribute", writeTestClusterCharStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterLongCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterlongCharStringCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeTestClusterLongCharStringCommandParams.put(
        "value", testClusterlongCharStringCommandParameterInfo);
    InteractionInfo writeTestClusterLongCharStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeLongCharStringAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterLongCharStringCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeLongCharStringAttribute", writeTestClusterLongCharStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterEpochUsCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterepochUsCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterEpochUsCommandParams.put("value", testClusterepochUsCommandParameterInfo);
    InteractionInfo writeTestClusterEpochUsAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeEpochUsAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterEpochUsCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeEpochUsAttribute", writeTestClusterEpochUsAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterEpochSCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterepochSCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterEpochSCommandParams.put("value", testClusterepochSCommandParameterInfo);
    InteractionInfo writeTestClusterEpochSAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeEpochSAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterEpochSCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeEpochSAttribute", writeTestClusterEpochSAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterVendorIdCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustervendorIdCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterVendorIdCommandParams.put("value", testClustervendorIdCommandParameterInfo);
    InteractionInfo writeTestClusterVendorIdAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeVendorIdAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterVendorIdCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeVendorIdAttribute", writeTestClusterVendorIdAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterEnumAttrCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterenumAttrCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterEnumAttrCommandParams.put("value", testClusterenumAttrCommandParameterInfo);
    InteractionInfo writeTestClusterEnumAttrAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeEnumAttrAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterEnumAttrCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeEnumAttrAttribute", writeTestClusterEnumAttrAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterRangeRestrictedInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterrangeRestrictedInt8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterRangeRestrictedInt8uCommandParams.put(
        "value", testClusterrangeRestrictedInt8uCommandParameterInfo);
    InteractionInfo writeTestClusterRangeRestrictedInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeRangeRestrictedInt8uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterRangeRestrictedInt8uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeRangeRestrictedInt8uAttribute",
        writeTestClusterRangeRestrictedInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterRangeRestrictedInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterrangeRestrictedInt8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterRangeRestrictedInt8sCommandParams.put(
        "value", testClusterrangeRestrictedInt8sCommandParameterInfo);
    InteractionInfo writeTestClusterRangeRestrictedInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeRangeRestrictedInt8sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterRangeRestrictedInt8sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeRangeRestrictedInt8sAttribute",
        writeTestClusterRangeRestrictedInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterRangeRestrictedInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterrangeRestrictedInt16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterRangeRestrictedInt16uCommandParams.put(
        "value", testClusterrangeRestrictedInt16uCommandParameterInfo);
    InteractionInfo writeTestClusterRangeRestrictedInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeRangeRestrictedInt16uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterRangeRestrictedInt16uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeRangeRestrictedInt16uAttribute",
        writeTestClusterRangeRestrictedInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterRangeRestrictedInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterrangeRestrictedInt16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterRangeRestrictedInt16sCommandParams.put(
        "value", testClusterrangeRestrictedInt16sCommandParameterInfo);
    InteractionInfo writeTestClusterRangeRestrictedInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeRangeRestrictedInt16sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterRangeRestrictedInt16sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeRangeRestrictedInt16sAttribute",
        writeTestClusterRangeRestrictedInt16sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterTimedWriteBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustertimedWriteBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestClusterTimedWriteBooleanCommandParams.put(
        "value", testClustertimedWriteBooleanCommandParameterInfo);
    InteractionInfo writeTestClusterTimedWriteBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeTimedWriteBooleanAttribute(
                      (DefaultClusterCallback) callback,
                      (Object) commandArguments.get("value"),
                      10000);
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterTimedWriteBooleanCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeTimedWriteBooleanAttribute",
        writeTestClusterTimedWriteBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterGeneralErrorBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClustergeneralErrorBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestClusterGeneralErrorBooleanCommandParams.put(
        "value", testClustergeneralErrorBooleanCommandParameterInfo);
    InteractionInfo writeTestClusterGeneralErrorBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeGeneralErrorBooleanAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterGeneralErrorBooleanCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeGeneralErrorBooleanAttribute",
        writeTestClusterGeneralErrorBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterClusterErrorBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterclusterErrorBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestClusterClusterErrorBooleanCommandParams.put(
        "value", testClusterclusterErrorBooleanCommandParameterInfo);
    InteractionInfo writeTestClusterClusterErrorBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeClusterErrorBooleanAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterClusterErrorBooleanCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeClusterErrorBooleanAttribute",
        writeTestClusterClusterErrorBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterUnsupportedCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterunsupportedCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestClusterUnsupportedCommandParams.put(
        "value", testClusterunsupportedCommandParameterInfo);
    InteractionInfo writeTestClusterUnsupportedAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeUnsupportedAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterUnsupportedCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeUnsupportedAttribute", writeTestClusterUnsupportedAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableBooleanCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableBooleanCommandParameterInfo =
        new CommandParameterInfo("value", Boolean.class, Boolean.class);
    writeTestClusterNullableBooleanCommandParams.put(
        "value", testClusternullableBooleanCommandParameterInfo);
    InteractionInfo writeTestClusterNullableBooleanAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableBooleanAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableBooleanCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableBooleanAttribute", writeTestClusterNullableBooleanAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableBitmap8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableBitmap8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableBitmap8CommandParams.put(
        "value", testClusternullableBitmap8CommandParameterInfo);
    InteractionInfo writeTestClusterNullableBitmap8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableBitmap8Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableBitmap8CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableBitmap8Attribute", writeTestClusterNullableBitmap8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableBitmap16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableBitmap16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableBitmap16CommandParams.put(
        "value", testClusternullableBitmap16CommandParameterInfo);
    InteractionInfo writeTestClusterNullableBitmap16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableBitmap16Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableBitmap16CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableBitmap16Attribute", writeTestClusterNullableBitmap16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableBitmap32CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableBitmap32CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableBitmap32CommandParams.put(
        "value", testClusternullableBitmap32CommandParameterInfo);
    InteractionInfo writeTestClusterNullableBitmap32AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableBitmap32Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableBitmap32CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableBitmap32Attribute", writeTestClusterNullableBitmap32AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableBitmap64CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableBitmap64CommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableBitmap64CommandParams.put(
        "value", testClusternullableBitmap64CommandParameterInfo);
    InteractionInfo writeTestClusterNullableBitmap64AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableBitmap64Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableBitmap64CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableBitmap64Attribute", writeTestClusterNullableBitmap64AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableInt8uCommandParams.put(
        "value", testClusternullableInt8uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt8uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt8uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt8uAttribute", writeTestClusterNullableInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableInt16uCommandParams.put(
        "value", testClusternullableInt16uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt16uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt16uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt16uAttribute", writeTestClusterNullableInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt24uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt24uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt24uCommandParams.put(
        "value", testClusternullableInt24uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt24uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt24uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt24uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt24uAttribute", writeTestClusterNullableInt24uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt32uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt32uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt32uCommandParams.put(
        "value", testClusternullableInt32uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt32uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt32uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt32uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt32uAttribute", writeTestClusterNullableInt32uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt40uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt40uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt40uCommandParams.put(
        "value", testClusternullableInt40uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt40uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt40uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt40uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt40uAttribute", writeTestClusterNullableInt40uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt48uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt48uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt48uCommandParams.put(
        "value", testClusternullableInt48uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt48uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt48uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt48uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt48uAttribute", writeTestClusterNullableInt48uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt56uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt56uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt56uCommandParams.put(
        "value", testClusternullableInt56uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt56uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt56uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt56uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt56uAttribute", writeTestClusterNullableInt56uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt64uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt64uCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt64uCommandParams.put(
        "value", testClusternullableInt64uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt64uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt64uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt64uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt64uAttribute", writeTestClusterNullableInt64uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableInt8sCommandParams.put(
        "value", testClusternullableInt8sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt8sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt8sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt8sAttribute", writeTestClusterNullableInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableInt16sCommandParams.put(
        "value", testClusternullableInt16sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt16sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt16sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt16sAttribute", writeTestClusterNullableInt16sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt24sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt24sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt24sCommandParams.put(
        "value", testClusternullableInt24sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt24sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt24sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt24sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt24sAttribute", writeTestClusterNullableInt24sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt32sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt32sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt32sCommandParams.put(
        "value", testClusternullableInt32sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt32sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt32sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt32sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt32sAttribute", writeTestClusterNullableInt32sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt40sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt40sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt40sCommandParams.put(
        "value", testClusternullableInt40sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt40sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt40sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt40sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt40sAttribute", writeTestClusterNullableInt40sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt48sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt48sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt48sCommandParams.put(
        "value", testClusternullableInt48sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt48sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt48sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt48sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt48sAttribute", writeTestClusterNullableInt48sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt56sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt56sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt56sCommandParams.put(
        "value", testClusternullableInt56sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt56sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt56sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt56sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt56sAttribute", writeTestClusterNullableInt56sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableInt64sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableInt64sCommandParameterInfo =
        new CommandParameterInfo("value", Long.class, Long.class);
    writeTestClusterNullableInt64sCommandParams.put(
        "value", testClusternullableInt64sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableInt64sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableInt64sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableInt64sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableInt64sAttribute", writeTestClusterNullableInt64sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableEnum8CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableEnum8CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableEnum8CommandParams.put(
        "value", testClusternullableEnum8CommandParameterInfo);
    InteractionInfo writeTestClusterNullableEnum8AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableEnum8Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableEnum8CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableEnum8Attribute", writeTestClusterNullableEnum8AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableEnum16CommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableEnum16CommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableEnum16CommandParams.put(
        "value", testClusternullableEnum16CommandParameterInfo);
    InteractionInfo writeTestClusterNullableEnum16AttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableEnum16Attribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableEnum16CommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableEnum16Attribute", writeTestClusterNullableEnum16AttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableFloatSingleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableFloatSingleCommandParameterInfo =
        new CommandParameterInfo("value", Float.class, Float.class);
    writeTestClusterNullableFloatSingleCommandParams.put(
        "value", testClusternullableFloatSingleCommandParameterInfo);
    InteractionInfo writeTestClusterNullableFloatSingleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableFloatSingleAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableFloatSingleCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableFloatSingleAttribute",
        writeTestClusterNullableFloatSingleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableFloatDoubleCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableFloatDoubleCommandParameterInfo =
        new CommandParameterInfo("value", Double.class, Double.class);
    writeTestClusterNullableFloatDoubleCommandParams.put(
        "value", testClusternullableFloatDoubleCommandParameterInfo);
    InteractionInfo writeTestClusterNullableFloatDoubleAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableFloatDoubleAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableFloatDoubleCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableFloatDoubleAttribute",
        writeTestClusterNullableFloatDoubleAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableOctetStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableOctetStringCommandParameterInfo =
        new CommandParameterInfo("value", byte[].class, byte[].class);
    writeTestClusterNullableOctetStringCommandParams.put(
        "value", testClusternullableOctetStringCommandParameterInfo);
    InteractionInfo writeTestClusterNullableOctetStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableOctetStringAttribute(
                      (DefaultClusterCallback) callback, (byte[]) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableOctetStringCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableOctetStringAttribute",
        writeTestClusterNullableOctetStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableCharStringCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableCharStringCommandParameterInfo =
        new CommandParameterInfo("value", String.class, String.class);
    writeTestClusterNullableCharStringCommandParams.put(
        "value", testClusternullableCharStringCommandParameterInfo);
    InteractionInfo writeTestClusterNullableCharStringAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableCharStringAttribute(
                      (DefaultClusterCallback) callback, (String) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableCharStringCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableCharStringAttribute",
        writeTestClusterNullableCharStringAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableEnumAttrCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableEnumAttrCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableEnumAttrCommandParams.put(
        "value", testClusternullableEnumAttrCommandParameterInfo);
    InteractionInfo writeTestClusterNullableEnumAttrAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableEnumAttrAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableEnumAttrCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableEnumAttrAttribute", writeTestClusterNullableEnumAttrAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableRangeRestrictedInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableRangeRestrictedInt8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableRangeRestrictedInt8uCommandParams.put(
        "value", testClusternullableRangeRestrictedInt8uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableRangeRestrictedInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableRangeRestrictedInt8uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableRangeRestrictedInt8uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableRangeRestrictedInt8uAttribute",
        writeTestClusterNullableRangeRestrictedInt8uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableRangeRestrictedInt8sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableRangeRestrictedInt8sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableRangeRestrictedInt8sCommandParams.put(
        "value", testClusternullableRangeRestrictedInt8sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableRangeRestrictedInt8sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableRangeRestrictedInt8sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableRangeRestrictedInt8sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableRangeRestrictedInt8sAttribute",
        writeTestClusterNullableRangeRestrictedInt8sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableRangeRestrictedInt16uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableRangeRestrictedInt16uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableRangeRestrictedInt16uCommandParams.put(
        "value", testClusternullableRangeRestrictedInt16uCommandParameterInfo);
    InteractionInfo writeTestClusterNullableRangeRestrictedInt16uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableRangeRestrictedInt16uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableRangeRestrictedInt16uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableRangeRestrictedInt16uAttribute",
        writeTestClusterNullableRangeRestrictedInt16uAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterNullableRangeRestrictedInt16sCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusternullableRangeRestrictedInt16sCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterNullableRangeRestrictedInt16sCommandParams.put(
        "value", testClusternullableRangeRestrictedInt16sCommandParameterInfo);
    InteractionInfo writeTestClusterNullableRangeRestrictedInt16sAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeNullableRangeRestrictedInt16sAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterNullableRangeRestrictedInt16sCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeNullableRangeRestrictedInt16sAttribute",
        writeTestClusterNullableRangeRestrictedInt16sAttributeInteractionInfo);
    Map<String, CommandParameterInfo> writeTestClusterWriteOnlyInt8uCommandParams =
        new LinkedHashMap<String, CommandParameterInfo>();
    CommandParameterInfo testClusterwriteOnlyInt8uCommandParameterInfo =
        new CommandParameterInfo("value", Integer.class, Integer.class);
    writeTestClusterWriteOnlyInt8uCommandParams.put(
        "value", testClusterwriteOnlyInt8uCommandParameterInfo);
    InteractionInfo writeTestClusterWriteOnlyInt8uAttributeInteractionInfo =
        new InteractionInfo(
            (cluster, callback, commandArguments) -> {
              ((ChipClusters.TestClusterCluster) cluster)
                  .writeWriteOnlyInt8uAttribute(
                      (DefaultClusterCallback) callback, (Object) commandArguments.get("value"));
            },
            () -> new ClusterInfoMapping.DelegatedDefaultClusterCallback(),
            writeTestClusterWriteOnlyInt8uCommandParams);
    writeTestClusterInteractionInfo.put(
        "writeWriteOnlyInt8uAttribute", writeTestClusterWriteOnlyInt8uAttributeInteractionInfo);
    writeAttributeMap.put("testCluster", writeTestClusterInteractionInfo);
    return writeAttributeMap;
  }
}
