{{> header}}
{{#if (chip_has_client_clusters)}}

package chip.devicecontroller;

import javax.annotation.Nullable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

public class ChipClusters {

  public interface DefaultClusterCallback {
    void onSuccess();
    void onError(Exception error);
  }

  public interface CharStringAttributeCallback {
    /** Indicates a successful read for a CHAR_STRING attribute. */
    void onSuccess(String value);
    void onError(Exception error);
    {{! TODO: use SubscriptionEstablishedCallback instead, here and below. }}
    default void onSubscriptionEstablished() {}
  }

  public interface OctetStringAttributeCallback {
    /** Indicates a successful read for an OCTET_STRING attribute. */
    void onSuccess(byte[] value);
    void onError(Exception error);
    default void onSubscriptionEstablished() {}
  }

  public interface IntegerAttributeCallback {
    void onSuccess(int value);
    void onError(Exception error);
    default void onSubscriptionEstablished() {}
  }

  public interface LongAttributeCallback {
    void onSuccess(long value);
    void onError(Exception error);
    default void onSubscriptionEstablished() {}
  }

  public interface BooleanAttributeCallback {
    void onSuccess(boolean value);
    void onError(Exception error);
    default void onSubscriptionEstablished() {}
  }

  public interface FloatAttributeCallback {
    void onSuccess(float value);
    void onError(Exception error);
    default void onSubscriptionEstablished() {}
  }

  public interface DoubleAttributeCallback {
    void onSuccess(double value);
    void onError(Exception error);
    default void onSubscriptionEstablished() {}
  }

  public static abstract class BaseChipCluster {
    protected long chipClusterPtr;

    public BaseChipCluster(long devicePtr, int endpointId) {
      chipClusterPtr = initWithDevice(devicePtr, endpointId);
    }

    /**
     * Sets the timeout, in milliseconds, after which commands sent through this cluster will fail
     * with a timeout (regardless of whether or not a response has been received). If set to an
     * empty optional, the default timeout will be used.
     */
    public void setCommandTimeout(Optional<Long> timeoutMillis) {
      setCommandTimeout(chipClusterPtr, timeoutMillis);
    }

    private native void setCommandTimeout(long clusterPtr, Optional<Long> timeoutMillis);

    /** Returns the current timeout (in milliseconds) for commands sent through this cluster. */
    public Optional<Long> getCommandTimeout() {
      Optional<Long> timeout = getCommandTimeout(chipClusterPtr);
      return timeout == null ? Optional.empty() : timeout;
    }

    private native Optional<Long> getCommandTimeout(long clusterPtr);

    public abstract long initWithDevice(long devicePtr, int endpointId);

    public native void deleteCluster(long chipClusterPtr);
    
    @SuppressWarnings("deprecation")
    protected void finalize() throws Throwable {
      super.finalize();

      if (chipClusterPtr != 0) {
        deleteCluster(chipClusterPtr);
        chipClusterPtr = 0;
      }
    }
  }

  {{#all_user_clusters side='client'}}
  public static class {{asUpperCamelCase name}}Cluster extends BaseChipCluster {
    public static final long CLUSTER_ID = {{code}}L;

    public {{asUpperCamelCase name}}Cluster(long devicePtr, int endpointId) {
      super(devicePtr, endpointId);
    }

    @Override
    public native long initWithDevice(long devicePtr, int endpointId);
  {{#all_outgoing_commands_for_cluster name 'client'}}

    {{#unless mustUseTimedInvoke}}
    public void {{asLowerCamelCase name}}({{#if hasSpecificResponse}}{{asUpperCamelCase responseName}}Callback{{else}}DefaultClusterCallback{{/if}} callback
      {{#zcl_command_arguments}}, {{asJavaType type null parent.parent.name includeAnnotations=true}} {{asLowerCamelCase label}}{{/zcl_command_arguments}}) {
      {{asLowerCamelCase name}}(chipClusterPtr, callback{{#zcl_command_arguments}}, {{asLowerCamelCase label}}{{/zcl_command_arguments}}, null);
    }
    {{/unless}}

    public void {{asLowerCamelCase name}}({{#if hasSpecificResponse}}{{asUpperCamelCase responseName}}Callback{{else}}DefaultClusterCallback{{/if}} callback
      {{#zcl_command_arguments}}, {{asJavaType type null parent.parent.name includeAnnotations=true}} {{asLowerCamelCase label}}{{/zcl_command_arguments}}
      , int timedInvokeTimeoutMs) {
      {{asLowerCamelCase name}}(chipClusterPtr, callback{{#zcl_command_arguments}}, {{asLowerCamelCase label}}{{/zcl_command_arguments}}, timedInvokeTimeoutMs);
    }
  {{/all_outgoing_commands_for_cluster}}
  {{#all_outgoing_commands_for_cluster name 'client'}}
    private native void {{asLowerCamelCase name}}(long chipClusterPtr, {{#if hasSpecificResponse}}{{asUpperCamelCase responseName}}Callback{{else}}DefaultClusterCallback{{/if}} Callback
      {{#zcl_command_arguments}}, {{asJavaType type null parent.parent.name includeAnnotations=true}} {{asLowerCamelCase label}}{{/zcl_command_arguments}}
      , @Nullable Integer timedInvokeTimeoutMs);
  {{/all_outgoing_commands_for_cluster}}
  {{#all_incoming_commands_for_cluster name 'client'}}
    public interface {{asUpperCamelCase name}}Callback {
      void onSuccess({{#zcl_command_arguments}}{{#not_first}}, {{/not_first}}{{asJavaType type null parent.parent.name includeAnnotations=true}} {{asLowerCamelCase label}}{{/zcl_command_arguments}});
      
      void onError(Exception error);
    }

  {{/all_incoming_commands_for_cluster}}

  {{#zcl_attributes_server}}
  {{#if_unsupported_attribute_type type isArray}}
  {{else}}
  {{#if_attribute_complex type}}
    {{! NOTE: asJavaType ends up sniffing for isArray on the context. Since we want the type of our _entry_, force isArray to
          false. }}
    {{~#*inline "asJavaTypeForEntry"}}{{asJavaType type null parent.name forceNotList=true}}{{/inline~}}
    {{#if isArray}}
      public interface {{asUpperCamelCase name}}AttributeCallback {
        void onSuccess({{#if isNullable}}@Nullable{{/if}} List<{{>asJavaTypeForEntry isArray=false}}> valueList);
        void onError(Exception ex);
        default void onSubscriptionEstablished() {}
      }
    {{else}}
      public interface {{asUpperCamelCase name}}AttributeCallback {
        void onSuccess({{#if isNullable}}@Nullable{{/if}} {{>asJavaTypeForEntry isArray=false}} value);
        void onError(Exception ex);
        default void onSubscriptionEstablished() {}
      }
    {{/if}}
  {{/if_attribute_complex}}
  {{/if_unsupported_attribute_type}}
  {{/zcl_attributes_server}}
  {{#zcl_attributes_server}}
  {{! TODO: Add support for struct-typed attributes }}
  {{#if_unsupported_attribute_type type isArray}}
  {{else}}

    public void read{{asUpperCamelCase name}}Attribute(
    {{#if_attribute_complex type}}
      {{asUpperCamelCase name}}AttributeCallback callback
    {{else}}
      {{as_underlying_language_specific_zcl_type type language="java" boolean="Boolean"}}AttributeCallback callback
    {{/if_attribute_complex}}
    ) {
      read{{asUpperCamelCase name}}Attribute(chipClusterPtr, callback);
    }
  {{#if isWritableAttribute}}
    {{#unless mustUseTimedWrite}}
    public void write{{asUpperCamelCase name}}Attribute(DefaultClusterCallback callback, {{asJavaType type null parent.name}} value) {
      write{{asUpperCamelCase name}}Attribute(chipClusterPtr, callback, value, null);
    }
    {{/unless}}

    public void write{{asUpperCamelCase name}}Attribute(DefaultClusterCallback callback, {{asJavaType type null parent.name}} value, int timedWriteTimeoutMs) {
      write{{asUpperCamelCase name}}Attribute(chipClusterPtr, callback, value, timedWriteTimeoutMs);
    }
  {{/if}}
  {{#if isReportableAttribute}}
    public void subscribe{{asCamelCased name false}}Attribute(
      {{#if_attribute_complex type}}
        {{asUpperCamelCase name}}AttributeCallback callback
      {{else}}
        {{as_underlying_language_specific_zcl_type type language="java" boolean="Boolean"}}AttributeCallback callback
      {{/if_attribute_complex}},
      int minInterval, int maxInterval) {
      subscribe{{asCamelCased name false}}Attribute(chipClusterPtr, callback, minInterval, maxInterval);
    }
  {{/if}}
  {{/if_unsupported_attribute_type}}
  {{/zcl_attributes_server}}
  {{#zcl_attributes_server}}
  {{! TODO: Add support for struct-typed attributes }}
  {{#if_unsupported_attribute_type type isArray}}
  {{else}}

    private native void read{{asUpperCamelCase name}}Attribute(long chipClusterPtr,
      {{#if_attribute_complex type}}
        {{asUpperCamelCase name}}AttributeCallback callback
      {{else}}
        {{as_underlying_language_specific_zcl_type type language="java" boolean="Boolean"}}AttributeCallback callback
      {{/if_attribute_complex}}
    );
  {{#if isWritableAttribute}}

    private native void write{{asUpperCamelCase name}}Attribute(long chipClusterPtr, DefaultClusterCallback callback, {{asJavaType type null parent.name}} value, @Nullable Integer timedWriteTimeoutMs);
  {{/if}}
  {{#if isReportableAttribute}}
    private native void subscribe{{asCamelCased name false}}Attribute(long chipClusterPtr,
      {{#if_attribute_complex type}}
        {{asUpperCamelCase name}}AttributeCallback callback
      {{else}}
        {{as_underlying_language_specific_zcl_type type language="java" boolean="Boolean"}}AttributeCallback callback
      {{/if_attribute_complex}}, int minInterval, int maxInterval);
  {{/if}}
  {{/if_unsupported_attribute_type}}
  {{/zcl_attributes_server}}
  }
  {{#not_last}}

  {{/not_last}}
  {{/all_user_clusters}}
}
{{/if}}
